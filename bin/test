#!/usr/bin/env node

var path = require('path');
var cp = require('child_process');
var fs = require('fs');
var remote = require('gulp-remote-src');
var vzip = require('gulp-vinyl-zip');
var symdest = require('gulp-symdest');
var ghGot = require('gh-got');
var parse = require('github-parse-link');
var semver = require('semver');

var testRunFolder = '.vscode-test';
var testRunFolderAbsolute = path.join(process.cwd(), testRunFolder);
var darwinExecutable = path.join(testRunFolderAbsolute, 'Visual Studio Code.app', 'Contents', 'MacOS', 'Electron');
var linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'code');

var testsFolder;
if (process.env.CODE_TESTS_PATH) {
    testsFolder = process.env.CODE_TESTS_PATH;
} else if (fs.existsSync(path.join(process.cwd(), 'out', 'test'))) {
    testsFolder = path.join(process.cwd(), 'out', 'test'); // TS extension
} else {
    testsFolder = path.join(process.cwd(), 'test'); // JS extension
}

var testsWorkspace = process.env.CODE_TESTS_WORKSPACE || testsFolder;

console.log('### VS Code Extension Test Run ###');
console.log('Current working directory: ' + process.cwd());

// Recursively load the tags of all the pages
function getTags(url, tags) {
    var tags = tags || [];

    return ghGot(url || 'repos/Microsoft/vscode/tags')
        .then(function(result) {
            var link = parse(result.headers.link);
            tags = tags.concat(result.body);

            if (link.next) {
                return getTags(link.next, tags);
            }

            return tags;
        });
}

function getDownloadUrl() {
    if (process.env.CODE_DOWNLOAD_URL) {
        return Promise.resolve(process.env.CODE_DOWNLOAD_URL);
    }

    return getTags()
        .then(function(tags) {
            // Filter out invalid tags and prerelease tags
            tags = tags.filter(function(tag) {
                var parsed = semver.parse(tag.name);
                return parsed && parsed.prerelease.length === 0;
            });

            // Use the latest version as default
            var version = process.env.CODE_VERSION || tags[0].name;

            // Create a tags map
            var tagMap = tags.reduce(function(map, tag) {
                if (semver.valid(tag.name)) {
                    map[tag.name] = tag;
                }

                return map;
            }, {});

            var tag = tagMap[version];
            var filename;

            if (semver.lt(version, '0.10.10')) {
                filename = (process.platform === 'darwin') ? 'VSCode-darwin.zip' : 'VSCode-linux64.zip';
                linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'Code');
            } else {
                filename = (process.platform === 'darwin') ? 'VSCode-darwin-stable.zip' : 'VSCode-linux-x64-stable.zip';
            }

            // Post 0.10.6
            if (tag && semver.gt(version, '0.10.6')) {
                return ['https://az764295.vo.msecnd.net/stable', tag.commit.sha, filename].join('/');
            }

            // Pre 0.10.7
            return ['https://az764295.vo.msecnd.net/public', version, filename].join('/');
        });
}

function downloadExecutable(downloadUrl) {
    console.log('Downloading VS Code into "' + testRunFolderAbsolute + '" from: ' + downloadUrl);

    return new Promise(function(resolve, reject) {
        var stream = remote(downloadUrl, { base: '' })
            .pipe(vzip.src())
            .pipe(symdest(testRunFolder));

        stream.on('error', reject);
        stream.on('end', resolve);
    });
}

function runTests() {
    var executable = process.platform === 'darwin' ? darwinExecutable : linuxExecutable;
    var args = [
        testsWorkspace,
        '--extensionDevelopmentPath=' + process.cwd(),
        '--extensionTestsPath=' + testsFolder
    ];

    console.log('Running extension tests: ' + [executable, args.join(' ')].join(' '));

    var cmd = cp.spawn(executable, args);

    cmd.stdout.on('data', function(data) {
        console.log(data.toString());
    });

    cmd.stderr.on('data', function(data) {
        console.error(data.toString());
    });

    cmd.on('error', function(data) {
        console.log('Failed to execute tests: ' + data.toString());
    });

    cmd.on('close', function(code) {
        console.log('Tests exited with code: ' + code);

        if (code !== 0) {
            process.exit(code); // propagate exit code to outer runner
        }
    });
}

fs.exists(testRunFolderAbsolute, function(exists) {
    if (exists) {
        runTests();
        return;
    }

    getDownloadUrl()
        .then(downloadExecutable)
        .then(runTests)
        .catch(function(err) {
            console.error(err.stack);
        });
});